### YamlMime:TSType
name: EphemeralEventScope
uid: '@microsoft/live-share.EphemeralEventScope'
package: '@microsoft/live-share'
summary: Object responsible for sending and receiving ephemeral events.
fullName: EphemeralEventScope
remarks: >-
  Ephemeral objects send and receive events using an event scope. Event scopes
  can be restricted

  to only receive events from clients with specific roles. Any events that are
  received from

  clients without an allowed role type will be ignored.


  Event scopes are isolated on a per Fluid object basis. That means that two
  different Fluid

  objects using the same event names don't have to worry about collisions.  Two
  event scopes

  within the same Fluid object, however, don't have any isolation. You can use
  multiple event

  scopes within the same FLuid object, you just need to be careful that they
  send different

  events.
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'EphemeralEventScope(IRuntimeSignaler, UserMeetingRole[])'
    uid: '@microsoft/live-share.EphemeralEventScope.constructor'
    package: '@microsoft/live-share'
    summary: Creates a new `EphemeralEventScope` instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new EphemeralEventScope(runtime: IRuntimeSignaler, allowedRoles?:
        UserMeetingRole[])
      parameters:
        - id: runtime
          type: <xref uid="@microsoft/live-share.IRuntimeSignaler" />
          description: 'A Fluid objects runtime instance, typically `this.runtime`.'
        - id: allowedRoles
          type: '<xref uid="@microsoft/live-share.UserMeetingRole" />[]'
          description: |
            Optional. List of roles allowed to send events using this scope.
            You should use a second scope if you need mixed permission support.
properties:
  - name: addListener
    uid: '@microsoft/live-share.EphemeralEventScope.addListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: addListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addListener: TypedEventTransform<this, IErrorEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, IErrorEvent&gt;'
  - name: allowedRoles
    uid: '@microsoft/live-share.EphemeralEventScope.allowedRoles'
    package: '@microsoft/live-share'
    summary: List of roles allowed to send events through this scope.
    fullName: allowedRoles
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'UserMeetingRole[] allowedRoles'
      return:
        description: ''
        type: '<xref uid="@microsoft/live-share.UserMeetingRole" />[]'
  - name: clientId
    uid: '@microsoft/live-share.EphemeralEventScope.clientId'
    package: '@microsoft/live-share'
    summary: >-
      The runtimes current client ID. This will be `undefined` if the client is
      disconnected.
    fullName: clientId
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string | undefined clientId
      return:
        description: ''
        type: string | undefined
  - name: 'off'
    uid: '@microsoft/live-share.EphemeralEventScope.off'
    package: '@microsoft/live-share'
    summary: ''
    fullName: 'off'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'off: TypedEventTransform<this, IErrorEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, IErrorEvent&gt;'
  - name: 'on'
    uid: '@microsoft/live-share.EphemeralEventScope.on'
    package: '@microsoft/live-share'
    summary: ''
    fullName: 'on'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'on: TypedEventTransform<this, IErrorEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, IErrorEvent&gt;'
  - name: once
    uid: '@microsoft/live-share.EphemeralEventScope.once'
    package: '@microsoft/live-share'
    summary: ''
    fullName: once
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'once: TypedEventTransform<this, IErrorEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, IErrorEvent&gt;'
  - name: prependListener
    uid: '@microsoft/live-share.EphemeralEventScope.prependListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: prependListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'prependListener: TypedEventTransform<this, IErrorEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, IErrorEvent&gt;'
  - name: prependOnceListener
    uid: '@microsoft/live-share.EphemeralEventScope.prependOnceListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: prependOnceListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'prependOnceListener: TypedEventTransform<this, IErrorEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, IErrorEvent&gt;'
  - name: removeListener
    uid: '@microsoft/live-share.EphemeralEventScope.removeListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: removeListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'removeListener: TypedEventTransform<this, IErrorEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, IErrorEvent&gt;'
inheritedMethods:
  - name: 'emit(string | symbol, any[])'
    uid: '@microsoft/live-share.EphemeralEventScope.emit'
    package: '@microsoft/live-share'
    summary: >-
      Synchronously calls each of the listeners registered for the event
      named`eventName`, in the order they were registered, passing the supplied
      arguments

      to each.

      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      const EventEmitter = require('events');

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(eventName: string | symbol, args: any[]): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: 'any[]'
          description: ''
      return:
        description: ''
        type: boolean
  - name: eventNames()
    uid: '@microsoft/live-share.EphemeralEventScope.eventNames'
    package: '@microsoft/live-share'
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.
      ```js
      const EventEmitter = require('events');
      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function eventNames(): Array<string | symbol>'
      return:
        description: ''
        type: Array&lt;string | symbol&gt;
  - name: getMaxListeners()
    uid: '@microsoft/live-share.EphemeralEventScope.getMaxListeners'
    package: '@microsoft/live-share'
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:defaultMaxListeners>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
  - name: listenerCount(string | symbol)
    uid: '@microsoft/live-share.EphemeralEventScope.listenerCount'
    package: '@microsoft/live-share'
    summary: Returns the number of listeners listening to the event named `eventName`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listenerCount(eventName: string | symbol): number'
      parameters:
        - id: eventName
          type: string | symbol
          description: |
            The name of the event being listened for
      return:
        description: ''
        type: number
  - name: listeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralEventScope.listeners'
    package: '@microsoft/live-share'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.
      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
  - name: rawListeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralEventScope.rawListeners'
    package: '@microsoft/live-share'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).
      ```js
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rawListeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
  - name: removeAllListeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralEventScope.removeAllListeners'
    package: '@microsoft/live-share'
    summary: |-
      Removes all listeners, or those of the specified `eventName`.
      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string | symbol): this'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: this
  - name: setMaxListeners(number)
    uid: '@microsoft/live-share.EphemeralEventScope.setMaxListeners'
    package: '@microsoft/live-share'
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): this'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: this
methods:
  - name: 'offEvent<TEvent>(string, EphemeralEventListener<TEvent>)'
    uid: '@microsoft/live-share.EphemeralEventScope.offEvent'
    package: '@microsoft/live-share'
    summary: Un-registers a listener for a named event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function offEvent<TEvent>(eventName: string, listener:
        EphemeralEventListener<TEvent>): this
      parameters:
        - id: eventName
          type: string
          description: Name of event to un-register.
        - id: listener
          type: >-
            <xref uid="@microsoft/live-share.EphemeralEventListener"
            />&lt;TEvent&gt;
          description: |
            Function that was originally passed to `onEvent()`.
      return:
        description: ''
        type: this
  - name: 'onEvent<TEvent>(string, EphemeralEventListener<TEvent>)'
    uid: '@microsoft/live-share.EphemeralEventScope.onEvent'
    package: '@microsoft/live-share'
    summary: Registers a listener for a named event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onEvent<TEvent>(eventName: string, listener:
        EphemeralEventListener<TEvent>): this
      parameters:
        - id: eventName
          type: string
          description: Name of event to listen for.
        - id: listener
          type: >-
            <xref uid="@microsoft/live-share.EphemeralEventListener"
            />&lt;TEvent&gt;
          description: |
            Function to call when the named event is sent or received.
      return:
        description: ''
        type: this
  - name: 'sendEvent<TEvent>(string, Partial<TEvent>)'
    uid: '@microsoft/live-share.EphemeralEventScope.sendEvent'
    package: '@microsoft/live-share'
    summary: Sends an event to other event scope instances for the Fluid object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendEvent<TEvent>(eventName: string, evt?: Partial<TEvent>):
        TEvent
      parameters:
        - id: eventName
          type: string
          description: Name of the event to send.
        - id: evt
          type: Partial&lt;TEvent&gt;
          description: |-
            Optional. Partial event object to send. The `IEphemeralEvent.name`,
            `IEphemeralEvent.timestamp`, and `IEphemeralEvent.clientId`
            fields will be automatically populated prior to sending.
      return:
        description: >-
          The full event, including `IEphemeralEvent.name`,

          `IEphemeralEvent.timestamp`, and `IEphemeralEvent.clientId` fields if
          known.
        type: TEvent
extends: TypedEventEmitter&lt;IErrorEvent&gt;
