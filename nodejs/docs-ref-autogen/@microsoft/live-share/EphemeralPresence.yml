### YamlMime:TSType
name: EphemeralPresence
uid: '@microsoft/live-share.EphemeralPresence'
package: '@microsoft/live-share'
summary: >-
  Ephemeral fluid object that synchronizes presence information for the user
  with other clients.
fullName: EphemeralPresence<TData>
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      EphemeralPresence(IDataObjectProps<{ Events:
      IEphemeralPresenceEvents<TData> }>)
    uid: '@microsoft/live-share.EphemeralPresence.constructor'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new EphemeralPresence(props: IDataObjectProps<{ Events:
        IEphemeralPresenceEvents<TData> }>)
      parameters:
        - id: props
          type: >-
            IDataObjectProps&lt;{ Events: IEphemeralPresenceEvents&lt;TData&gt;
            }&gt;
          description: ''
properties:
  - name: addListener
    uid: '@microsoft/live-share.EphemeralPresence.addListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: addListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addListener: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
  - name: data
    uid: '@microsoft/live-share.EphemeralPresence.data'
    package: '@microsoft/live-share'
    summary: Optional data object shared by the user.
    fullName: data
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: TData | undefined data
      return:
        description: ''
        type: TData | undefined
  - name: disposed
    uid: '@microsoft/live-share.EphemeralPresence.disposed'
    package: '@microsoft/live-share'
    summary: ''
    fullName: disposed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: boolean disposed
      return:
        description: ''
        type: boolean
  - name: expirationPeriod
    uid: '@microsoft/live-share.EphemeralPresence.expirationPeriod'
    package: '@microsoft/live-share'
    summary: >-
      Number of seconds without a presence update before a remote user is
      considered offline.
    fullName: expirationPeriod
    remarks: >-
      Defaults to a value of `20` seconds. The minimum value is 0.1 seconds for
      testing purposes.
    isPreview: false
    isDeprecated: false
    syntax:
      content: number expirationPeriod
      return:
        description: ''
        type: number
  - name: factory
    uid: '@microsoft/live-share.EphemeralPresence.factory'
    package: '@microsoft/live-share'
    summary: The objects fluid type factory.
    fullName: factory
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static factory: DataObjectFactory<EphemeralPresence<object>,
        DataObjectTypes>
      return:
        description: ''
        type: >-
          DataObjectFactory&lt;<xref
          uid="@microsoft/live-share.EphemeralPresence" />&lt;object&gt;,
          DataObjectTypes&gt;
  - name: handle
    uid: '@microsoft/live-share.EphemeralPresence.handle'
    package: '@microsoft/live-share'
    summary: Handle to a data store
    fullName: handle
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: IFluidHandle<this> handle
      return:
        description: ''
        type: IFluidHandle&lt;this&gt;
  - name: id
    uid: '@microsoft/live-share.EphemeralPresence.id'
    package: '@microsoft/live-share'
    summary: ''
    fullName: id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string id
      return:
        description: ''
        type: string
  - name: IFluidHandle
    uid: '@microsoft/live-share.EphemeralPresence.IFluidHandle'
    package: '@microsoft/live-share'
    summary: ''
    fullName: IFluidHandle
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: IFluidHandle<this> IFluidHandle
      return:
        description: ''
        type: IFluidHandle&lt;this&gt;
  - name: IFluidLoadable
    uid: '@microsoft/live-share.EphemeralPresence.IFluidLoadable'
    package: '@microsoft/live-share'
    summary: ''
    fullName: IFluidLoadable
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: this IFluidLoadable
      return:
        description: ''
        type: this
  - name: IFluidRouter
    uid: '@microsoft/live-share.EphemeralPresence.IFluidRouter'
    package: '@microsoft/live-share'
    summary: ''
    fullName: IFluidRouter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: this IFluidRouter
      return:
        description: ''
        type: this
  - name: isStarted
    uid: '@microsoft/live-share.EphemeralPresence.isStarted'
    package: '@microsoft/live-share'
    summary: Returns true if the object has been started.
    fullName: isStarted
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: boolean isStarted
      return:
        description: ''
        type: boolean
  - name: 'off'
    uid: '@microsoft/live-share.EphemeralPresence.off'
    package: '@microsoft/live-share'
    summary: ''
    fullName: 'off'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'off: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
  - name: 'on'
    uid: '@microsoft/live-share.EphemeralPresence.on'
    package: '@microsoft/live-share'
    summary: ''
    fullName: 'on'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'on: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
  - name: once
    uid: '@microsoft/live-share.EphemeralPresence.once'
    package: '@microsoft/live-share'
    summary: ''
    fullName: once
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'once: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
  - name: prependListener
    uid: '@microsoft/live-share.EphemeralPresence.prependListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: prependListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'prependListener: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
  - name: prependOnceListener
    uid: '@microsoft/live-share.EphemeralPresence.prependOnceListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: prependOnceListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'prependOnceListener: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
  - name: removeListener
    uid: '@microsoft/live-share.EphemeralPresence.removeListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: removeListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'removeListener: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
  - name: state
    uid: '@microsoft/live-share.EphemeralPresence.state'
    package: '@microsoft/live-share'
    summary: The users current presence state.
    fullName: state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: PresenceState state
      return:
        description: ''
        type: <xref uid="@microsoft/live-share.PresenceState" />
  - name: TypeName
    uid: '@microsoft/live-share.EphemeralPresence.TypeName'
    package: '@microsoft/live-share'
    summary: The objects fluid type/name.
    fullName: TypeName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static TypeName: "@microsoft/live-share:EphemeralPresence" =
        "@microsoft/live-share:EphemeralPresence"
      return:
        description: ''
        type: '"@microsoft/live-share:EphemeralPresence"'
  - name: userId
    uid: '@microsoft/live-share.EphemeralPresence.userId'
    package: '@microsoft/live-share'
    summary: Returns the ID of the local user.
    fullName: userId
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string userId
      return:
        description: ''
        type: string
inheritedMethods:
  - name: 'emit(string | symbol, any[])'
    uid: '@microsoft/live-share.EphemeralPresence.emit'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(event: string | symbol, args: any[]): boolean'
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: args
          type: 'any[]'
          description: ''
      return:
        description: ''
        type: boolean
  - name: eventNames()
    uid: '@microsoft/live-share.EphemeralPresence.eventNames'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function eventNames(): Array<string | symbol>'
      return:
        description: ''
        type: Array&lt;string | symbol&gt;
  - name: finishInitialization(boolean)
    uid: '@microsoft/live-share.EphemeralPresence.finishInitialization'
    package: '@microsoft/live-share'
    summary: >-
      Call this API to ensure PureDataObject is fully initialized

      initialization happens on demand, only on as-needed bases.

      In most cases you should allow factory/object to decide when to finish
      initialization.

      But if you are supplying your own implementation of DataStoreRuntime
      factory and overriding some methods

      and need fully initialized object, then you can call this API to ensure
      object is fully initialized.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function finishInitialization(existing: boolean): Promise<void>'
      parameters:
        - id: existing
          type: boolean
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: getDataObject(IFluidDataStoreRuntime)
    uid: '@microsoft/live-share.EphemeralPresence.getDataObject'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getDataObject(runtime: IFluidDataStoreRuntime):
        Promise<PureDataObject<DataObjectTypes>>
      parameters:
        - id: runtime
          type: IFluidDataStoreRuntime
          description: ''
      return:
        description: ''
        type: Promise&lt;PureDataObject&lt;DataObjectTypes&gt;&gt;
  - name: >-
      getFluidObjectFromDirectory<T>(string, IDirectory, undefined | (id:
      string, directory: IDirectory) => IFluidHandle | undefined)
    uid: '@microsoft/live-share.EphemeralPresence.getFluidObjectFromDirectory'
    package: '@microsoft/live-share'
    summary: Retrieve Fluid object using the handle get
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getFluidObjectFromDirectory<T>(key: string, directory:
        IDirectory, getObjectFromDirectory?: undefined | (id: string, directory:
        IDirectory) => IFluidHandle | undefined): Promise<T | undefined>
      parameters:
        - id: key
          type: string
          description: key that object (handle/id) is stored with in the directory
        - id: directory
          type: IDirectory
          description: directory containing the object
        - id: getObjectFromDirectory
          type: >-
            undefined | (id: string, directory: IDirectory) =&gt; IFluidHandle |
            undefined
          description: >
            optional callback for fetching object from the directory, allows
            users to

            define custom types/getters for object retrieval
      return:
        description: ''
        type: Promise&lt;T | undefined&gt;
  - name: getMaxListeners()
    uid: '@microsoft/live-share.EphemeralPresence.getMaxListeners'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
  - name: initializeInternal(boolean)
    uid: '@microsoft/live-share.EphemeralPresence.initializeInternal'
    package: '@microsoft/live-share'
    summary: |-
      Initializes internal objects and calls initialization overrides.
      Caller is responsible for ensuring this is only invoked once.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function initializeInternal(existing: boolean): Promise<void>'
      parameters:
        - id: existing
          type: boolean
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: listenerCount(string | symbol)
    uid: '@microsoft/live-share.EphemeralPresence.listenerCount'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listenerCount(event: string | symbol): number'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: number
  - name: listeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralPresence.listeners'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listeners(event: string | symbol): Function[]'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
  - name: rawListeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralPresence.rawListeners'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rawListeners(event: string | symbol): Function[]'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
  - name: removeAllListeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralPresence.removeAllListeners'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string | symbol): this'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: this
  - name: request(IRequest)
    uid: '@microsoft/live-share.EphemeralPresence.request'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function request(request: IRequest): Promise<IResponse>'
      parameters:
        - id: request
          type: IRequest
          description: ''
      return:
        description: ''
        type: Promise&lt;IResponse&gt;
  - name: setMaxListeners(number)
    uid: '@microsoft/live-share.EphemeralPresence.setMaxListeners'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): this'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: this
methods:
  - name: dispose()
    uid: '@microsoft/live-share.EphemeralPresence.dispose'
    package: '@microsoft/live-share'
    summary: Disposes of the object when its container is disposed of.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function dispose()
  - name: 'forEach((user: EphemeralPresenceUser<TData>) => void, PresenceState)'
    uid: '@microsoft/live-share.EphemeralPresence.forEach'
    package: '@microsoft/live-share'
    summary: Enumerates each user the object is tracking presence for.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function forEach(callback: (user: EphemeralPresenceUser<TData>) => void,
        filter?: PresenceState)
      parameters:
        - id: callback
          type: '(user: EphemeralPresenceUser&lt;TData&gt;) =&gt; void'
          description: Function to call for each user.
        - id: filter
          type: <xref uid="@microsoft/live-share.PresenceState" />
          description: |
            Optional. Presence state to filter enumeration to.
  - name: getCount(PresenceState)
    uid: '@microsoft/live-share.EphemeralPresence.getCount'
    package: '@microsoft/live-share'
    summary: Counts the number of users that the object is tracking presence for.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getCount(filter?: PresenceState): number'
      parameters:
        - id: filter
          type: <xref uid="@microsoft/live-share.PresenceState" />
          description: Optional. Presence state to filter count to.
      return:
        description: >-
          Total number of other users we've seen or number of users with a given
          presence status.
        type: number
  - name: getPresenceForUser(string)
    uid: '@microsoft/live-share.EphemeralPresence.getPresenceForUser'
    package: '@microsoft/live-share'
    summary: Returns the current presence info for a specific user.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPresenceForUser(userId: string):
        EphemeralPresenceUser<TData> | undefined
      parameters:
        - id: userId
          type: string
          description: The ID of the user to retrieve.
      return:
        description: >-
          The current presence information for the user if they've connected to
          the space.
        type: >-
          <xref uid="@microsoft/live-share.EphemeralPresenceUser"
          />&lt;TData&gt; | undefined
  - name: 'start(undefined | string, TData, PresenceState)'
    uid: '@microsoft/live-share.EphemeralPresence.start'
    package: '@microsoft/live-share'
    summary: Starts sharing presence information.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function start(userId?: undefined | string, data?: TData, state?:
        PresenceState): Promise<void>
      parameters:
        - id: userId
          type: undefined | string
          description: Optional. ID of the local user. Defaults to a GUID if not provided.
        - id: data
          type: TData
          description: >-
            Optional. Custom data object to share. A deep copy of the data
            object is saved to avoid any accidental modifications.
        - id: state
          type: <xref uid="@microsoft/live-share.PresenceState" />
          description: >
            Optional. Initial presence state. Defaults to
            `PresenceState.online`.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: toArray()
    uid: '@microsoft/live-share.EphemeralPresence.toArray'
    package: '@microsoft/live-share'
    summary: Returns a snapshot of the current list of presence objects being tracked.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toArray(): EphemeralPresenceUser<TData>[]'
      return:
        description: Array of presence objects.
        type: >-
          <xref uid="@microsoft/live-share.EphemeralPresenceUser"
          />&lt;TData&gt;[]
  - name: 'updatePresence(PresenceState, TData)'
    uid: '@microsoft/live-share.EphemeralPresence.updatePresence'
    package: '@microsoft/live-share'
    summary: Updates the users presence state and/or shared data object.
    remarks: >-
      This will trigger the immediate broadcast of the users presence to all
      other clients.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function updatePresence(state?: PresenceState, data?: TData)'
      parameters:
        - id: state
          type: <xref uid="@microsoft/live-share.PresenceState" />
          description: Optional. Presence state to change.
        - id: data
          type: TData
          description: >
            Optional. Data object to change. A deep copy of the data object is
            saved to avoid any future changes.
extends: 'DataObject&lt;{ Events: IEphemeralPresenceEvents&lt;TData&gt; }&gt;'
