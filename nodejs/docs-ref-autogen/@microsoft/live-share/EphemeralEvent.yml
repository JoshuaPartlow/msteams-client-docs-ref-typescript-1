### YamlMime:TSType
name: EphemeralEvent
uid: '@microsoft/live-share.EphemeralEvent'
package: '@microsoft/live-share'
summary: >-
  Ephemeral fluid object that broadcasts an event to other clients and a set of
  static event

  related helpers.

  #### remarks

  Applications should call `on('received', (evt, local) => {})` to listen for
  local events sent

  and remote events received. Events aren't guaranteed to be delivered so you
  should limit their

  use to sending events you're ok with potentially being missed. Reactions are a
  good use case for

  `EphemeralEvents`. Use something like the `EphemeralState` class when syncing
  state.
fullName: EphemeralEvent<TEvent>
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      EphemeralEvent(IDataObjectProps<{ Events: IEphemeralEventEvents<TEvent>
      }>)
    uid: '@microsoft/live-share.EphemeralEvent.constructor'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new EphemeralEvent(props: IDataObjectProps<{ Events:
        IEphemeralEventEvents<TEvent> }>)
      parameters:
        - id: props
          type: >-
            IDataObjectProps&lt;{ Events: IEphemeralEventEvents&lt;TEvent&gt;
            }&gt;
          description: ''
properties:
  - name: disposed
    uid: '@microsoft/live-share.EphemeralEvent.disposed'
    package: '@microsoft/live-share'
    summary: ''
    fullName: disposed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: boolean disposed
      return:
        description: ''
        type: boolean
  - name: factory
    uid: '@microsoft/live-share.EphemeralEvent.factory'
    package: '@microsoft/live-share'
    summary: The objects fluid type factory.
    fullName: factory
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static factory: DataObjectFactory<EphemeralEvent<IEphemeralEvent>,
        DataObjectTypes>
      return:
        description: ''
        type: >-
          DataObjectFactory&lt;<xref uid="@microsoft/live-share.EphemeralEvent"
          />&lt;<xref uid="@microsoft/live-share.IEphemeralEvent" />&gt;,
          DataObjectTypes&gt;
  - name: handle
    uid: '@microsoft/live-share.EphemeralEvent.handle'
    package: '@microsoft/live-share'
    summary: Handle to a data store
    fullName: handle
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: IFluidHandle<this> handle
      return:
        description: ''
        type: IFluidHandle&lt;this&gt;
  - name: id
    uid: '@microsoft/live-share.EphemeralEvent.id'
    package: '@microsoft/live-share'
    summary: ''
    fullName: id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string id
      return:
        description: ''
        type: string
  - name: IFluidHandle
    uid: '@microsoft/live-share.EphemeralEvent.IFluidHandle'
    package: '@microsoft/live-share'
    summary: ''
    fullName: IFluidHandle
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: IFluidHandle<this> IFluidHandle
      return:
        description: ''
        type: IFluidHandle&lt;this&gt;
  - name: IFluidLoadable
    uid: '@microsoft/live-share.EphemeralEvent.IFluidLoadable'
    package: '@microsoft/live-share'
    summary: ''
    fullName: IFluidLoadable
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: this IFluidLoadable
      return:
        description: ''
        type: this
  - name: IFluidRouter
    uid: '@microsoft/live-share.EphemeralEvent.IFluidRouter'
    package: '@microsoft/live-share'
    summary: ''
    fullName: IFluidRouter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: this IFluidRouter
      return:
        description: ''
        type: this
  - name: isInitialized
    uid: '@microsoft/live-share.EphemeralEvent.isInitialized'
    package: '@microsoft/live-share'
    summary: Returns true if the object has been initialized.
    fullName: isInitialized
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: boolean isInitialized
      return:
        description: ''
        type: boolean
  - name: isStarted
    uid: '@microsoft/live-share.EphemeralEvent.isStarted'
    package: '@microsoft/live-share'
    summary: ''
    fullName: isStarted
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: |-
      isInitialized should be used instead
      Returns true if the object has been initialized.
    syntax:
      content: boolean isStarted
      return:
        description: ''
        type: boolean
  - name: TypeName
    uid: '@microsoft/live-share.EphemeralEvent.TypeName'
    package: '@microsoft/live-share'
    summary: The objects fluid type/name.
    fullName: TypeName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static TypeName: "@microsoft/live-share:EphemeralEvent" =
        "@microsoft/live-share:EphemeralEvent"
      return:
        description: ''
        type: '"@microsoft/live-share:EphemeralEvent"'
inheritedProperties:
  - name: addListener
    uid: '@microsoft/live-share.EphemeralEvent.addListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: addListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addListener: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.addListener
  - name: 'off'
    uid: '@microsoft/live-share.EphemeralEvent.off'
    package: '@microsoft/live-share'
    summary: ''
    fullName: 'off'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'off: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.off
  - name: 'on'
    uid: '@microsoft/live-share.EphemeralEvent.on'
    package: '@microsoft/live-share'
    summary: ''
    fullName: 'on'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'on: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.on
  - name: once
    uid: '@microsoft/live-share.EphemeralEvent.once'
    package: '@microsoft/live-share'
    summary: ''
    fullName: once
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'once: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.once
  - name: prependListener
    uid: '@microsoft/live-share.EphemeralEvent.prependListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: prependListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'prependListener: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.prependListener
  - name: prependOnceListener
    uid: '@microsoft/live-share.EphemeralEvent.prependOnceListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: prependOnceListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'prependOnceListener: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.prependOnceListener
  - name: removeListener
    uid: '@microsoft/live-share.EphemeralEvent.removeListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: removeListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'removeListener: TypedEventTransform<this, I["Events"] & IEvent>'
      return:
        description: ''
        type: 'TypedEventTransform&lt;this, I["Events"] & IEvent&gt;'
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.removeListener
inheritedMethods:
  - name: dispose()
    uid: '@microsoft/live-share.EphemeralEvent.dispose'
    package: '@microsoft/live-share'
    summary: Called when the host container closes and disposes itself
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function dispose()
    inheritanceDescription: <b>Inherited From</b> PureDataObject.dispose
  - name: 'emit(string | symbol, any[])'
    uid: '@microsoft/live-share.EphemeralEvent.emit'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(event: string | symbol, args: any[]): boolean'
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: args
          type: 'any[]'
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> EventEmitter.emit
  - name: eventNames()
    uid: '@microsoft/live-share.EphemeralEvent.eventNames'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function eventNames(): Array<string | symbol>'
      return:
        description: ''
        type: Array&lt;string | symbol&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.eventNames
  - name: finishInitialization(boolean)
    uid: '@microsoft/live-share.EphemeralEvent.finishInitialization'
    package: '@microsoft/live-share'
    summary: >-
      Call this API to ensure PureDataObject is fully initialized.

      Initialization happens on demand, only on as-needed bases.

      In most cases you should allow factory/object to decide when to finish
      initialization.

      But if you are supplying your own implementation of DataStoreRuntime
      factory and overriding some methods

      and need a fully initialized object, then you can call this API to ensure
      object is fully initialized.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function finishInitialization(existing: boolean): Promise<void>'
      parameters:
        - id: existing
          type: boolean
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> PureDataObject.finishInitialization
  - name: getDataObject(IFluidDataStoreRuntime)
    uid: '@microsoft/live-share.EphemeralEvent.getDataObject'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getDataObject(runtime: IFluidDataStoreRuntime):
        Promise<PureDataObject<DataObjectTypes>>
      parameters:
        - id: runtime
          type: IFluidDataStoreRuntime
          description: ''
      return:
        description: ''
        type: Promise&lt;PureDataObject&lt;DataObjectTypes&gt;&gt;
    inheritanceDescription: <b>Inherited From</b> PureDataObject.getDataObject
  - name: >-
      getFluidObjectFromDirectory<T>(string, IDirectory, undefined | (id:
      string, directory: IDirectory) => IFluidHandle | undefined)
    uid: '@microsoft/live-share.EphemeralEvent.getFluidObjectFromDirectory'
    package: '@microsoft/live-share'
    summary: Retrieve Fluid object using the handle get
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getFluidObjectFromDirectory<T>(key: string, directory:
        IDirectory, getObjectFromDirectory?: undefined | (id: string, directory:
        IDirectory) => IFluidHandle | undefined): Promise<T | undefined>
      parameters:
        - id: key
          type: string
          description: key that object (handle/id) is stored with in the directory
        - id: directory
          type: IDirectory
          description: directory containing the object
        - id: getObjectFromDirectory
          type: >-
            undefined | (id: string, directory: IDirectory) =&gt; IFluidHandle |
            undefined
          description: >
            optional callback for fetching object from the directory, allows
            users to

            define custom types/getters for object retrieval
      return:
        description: ''
        type: Promise&lt;T | undefined&gt;
    inheritanceDescription: <b>Inherited From</b> PureDataObject.getFluidObjectFromDirectory
  - name: getMaxListeners()
    uid: '@microsoft/live-share.EphemeralEvent.getMaxListeners'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getMaxListeners
  - name: initializeInternal(boolean)
    uid: '@microsoft/live-share.EphemeralEvent.initializeInternal'
    package: '@microsoft/live-share'
    summary: |-
      Initializes internal objects and calls initialization overrides.
      Caller is responsible for ensuring this is only invoked once.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function initializeInternal(existing: boolean): Promise<void>'
      parameters:
        - id: existing
          type: boolean
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> DataObject.initializeInternal
  - name: listenerCount(string | symbol)
    uid: '@microsoft/live-share.EphemeralEvent.listenerCount'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listenerCount(event: string | symbol): number'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listenerCount
  - name: listeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralEvent.listeners'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listeners(event: string | symbol): Function[]'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listeners
  - name: rawListeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralEvent.rawListeners'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rawListeners(event: string | symbol): Function[]'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
    inheritanceDescription: <b>Inherited From</b> EventEmitter.rawListeners
  - name: removeAllListeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralEvent.removeAllListeners'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string | symbol): this'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeAllListeners
  - name: request(IRequest)
    uid: '@microsoft/live-share.EphemeralEvent.request'
    package: '@microsoft/live-share'
    summary: '{@inheritDoc PureDataObject.request}'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function request(request: IRequest): Promise<IResponse>'
      parameters:
        - id: request
          type: IRequest
          description: ''
      return:
        description: ''
        type: Promise&lt;IResponse&gt;
    inheritanceDescription: <b>Inherited From</b> DataObject.request
  - name: setMaxListeners(number)
    uid: '@microsoft/live-share.EphemeralEvent.setMaxListeners'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): this'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.setMaxListeners
methods:
  - name: getClientRoles(string)
    uid: '@microsoft/live-share.EphemeralEvent.getClientRoles'
    package: '@microsoft/live-share'
    summary: Returns the list of roles supported for a client.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getClientRoles(clientId: string):
        Promise<UserMeetingRole[]>
      parameters:
        - id: clientId
          type: string
          description: Client ID to lookup.
      return:
        description: The list of roles for the client.
        type: 'Promise&lt;<xref uid="@microsoft/live-share.UserMeetingRole" />[]&gt;'
  - name: getTimestamp()
    uid: '@microsoft/live-share.EphemeralEvent.getTimestamp'
    package: '@microsoft/live-share'
    summary: >-
      Returns the current timestamp as the number of milliseconds sine the Unix
      Epoch.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function getTimestamp(): number'
      return:
        description: ''
        type: number
  - name: 'initialize(UserMeetingRole[])'
    uid: '@microsoft/live-share.EphemeralEvent.initialize'
    package: '@microsoft/live-share'
    summary: initialize the object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function initialize(allowedRoles?: UserMeetingRole[]): Promise<void>'
      parameters:
        - id: allowedRoles
          type: '<xref uid="@microsoft/live-share.UserMeetingRole" />[]'
          description: |
            Optional. List of roles allowed to send events.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      isNewer(IClientTimestamp | undefined, IClientTimestamp, undefined |
      number)
    uid: '@microsoft/live-share.EphemeralEvent.isNewer'
    package: '@microsoft/live-share'
    summary: >-
      Returns true if a received event is newer then the current event.

      #### remarks

      Used when building new Ephemeral objects to process state change events.
      The `isNewer()`

      method implements an algorithm that deals with conflicting events that
      have the same timestamp

      and older events that should have debounced the current event.


      - When the received event has the same timestamp as the current event,
      each events clientId
        will be used as a tie breaker. The clientId containing the lower sort order wins any ties.
      - Older events are generally ignored unless a debounce period is
      specified. An older event
        that should have debounced the current event will be considered newer.

      The algorithm employed by isNewer() helps ensure that all clients will
      eventually reach a

      consistent state with one other.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function isNewer(current: IClientTimestamp | undefined, received:
        IClientTimestamp, debouncePeriod?: undefined | number): boolean
      parameters:
        - id: current
          type: <xref uid="@microsoft/live-share.IClientTimestamp" /> | undefined
          description: Current event to compare received event against.
        - id: received
          type: <xref uid="@microsoft/live-share.IClientTimestamp" />
          description: Received event.
        - id: debouncePeriod
          type: undefined | number
          description: >-
            Optional. Time in milliseconds to ignore any new events for.
            Defaults to 0 ms.
      return:
        description: >-
          True if the received event is newer then the current event and should
          replace the current one.
        type: boolean
  - name: registerClientId(string)
    uid: '@microsoft/live-share.EphemeralEvent.registerClientId'
    package: '@microsoft/live-share'
    summary: Registers client id of the current user.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function registerClientId(clientId: string):
        Promise<UserMeetingRole[]>
      parameters:
        - id: clientId
          type: string
          description: Client ID to map to current user.
      return:
        description: The list of roles for the client.
        type: 'Promise&lt;<xref uid="@microsoft/live-share.UserMeetingRole" />[]&gt;'
  - name: sendEvent(Partial<TEvent>)
    uid: '@microsoft/live-share.EphemeralEvent.sendEvent'
    package: '@microsoft/live-share'
    summary: >-
      Broadcasts an event to all other clients.

      #### remarks

      The event will be queued for delivery if the client isn't currently
      connected.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendEvent(evt?: Partial<TEvent>): TEvent'
      parameters:
        - id: evt
          type: Partial&lt;TEvent&gt;
          description: >-
            Optional. Event to send. If omitted, an event will still be sent but
            it won't

            include any custom event data.
      return:
        description: >-
          The full event object that was sent, including the timestamp of when
          the event

          was sent and the clientId if known. The clientId will be `undefined`
          if the client is

          disconnected at time of delivery.
        type: TEvent
  - name: 'start(UserMeetingRole[])'
    uid: '@microsoft/live-share.EphemeralEvent.start'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: |-
      initialize should be used instead
      Starts the object.
    syntax:
      content: 'function start(allowedRoles?: UserMeetingRole[]): Promise<void>'
      parameters:
        - id: allowedRoles
          type: '<xref uid="@microsoft/live-share.UserMeetingRole" />[]'
          description: |
            Optional. List of roles allowed to send events.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'verifyRolesAllowed(string, UserMeetingRole[])'
    uid: '@microsoft/live-share.EphemeralEvent.verifyRolesAllowed'
    package: '@microsoft/live-share'
    summary: Verifies that a client has one of the specified roles.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyRolesAllowed(clientId: string, allowedRoles:
        UserMeetingRole[]): Promise<boolean>
      parameters:
        - id: clientId
          type: string
          description: Client ID to inspect.
        - id: allowedRoles
          type: '<xref uid="@microsoft/live-share.UserMeetingRole" />[]'
          description: User roles that are allowed.
      return:
        description: True if the client has one of the specified roles.
        type: Promise&lt;boolean&gt;
extends: 'DataObject&lt;{ Events: IEphemeralEventEvents&lt;TEvent&gt; }&gt;'
