### YamlMime:TSType
name: LiveShareClient
uid: '@microsoft/live-share.LiveShareClient'
package: '@microsoft/live-share'
summary: Client used to connect to fluid containers within a Microsoft Teams context.
fullName: LiveShareClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: LiveShareClient(ILiveShareHost, ILiveShareClientOptions)
    uid: '@microsoft/live-share.LiveShareClient.constructor'
    package: '@microsoft/live-share'
    summary: Creates a new `LiveShareClient` instance.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new LiveShareClient(host: ILiveShareHost, options?:
        ILiveShareClientOptions)
      parameters:
        - id: host
          type: <xref uid="@microsoft/live-share.ILiveShareHost" />
          description: Host for the current Live Share session.
        - id: options
          type: <xref uid="@microsoft/live-share.ILiveShareClientOptions" />
          description: Optional. Configuration options for the client.
properties:
  - name: isTesting
    uid: '@microsoft/live-share.LiveShareClient.isTesting'
    package: '@microsoft/live-share'
    summary: If true the client is configured to use a local test server.
    fullName: isTesting
    remarks: ''
    isDeprecated: false
    syntax:
      content: boolean isTesting
      return:
        description: ''
        type: boolean
  - name: maxContainerLookupTries
    uid: '@microsoft/live-share.LiveShareClient.maxContainerLookupTries'
    package: '@microsoft/live-share'
    summary: >-
      Number of times the client should attempt to get the ID of the container
      to join for the

      current context.
    fullName: maxContainerLookupTries
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'maxContainerLookupTries: number'
      return:
        description: ''
        type: number
methods:
  - name: getClientInfo(string)
    uid: '@microsoft/live-share.LiveShareClient.getClientInfo'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getClientInfo(clientId: string): Promise<undefined |
        IClientInfo>
      parameters:
        - id: clientId
          type: string
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;undefined | <xref uid="@microsoft/live-share.IClientInfo"
          />&gt;
  - name: getTimestamp()
    uid: '@microsoft/live-share.LiveShareClient.getTimestamp'
    package: '@microsoft/live-share'
    summary: >-
      Returns the current timestamp as the number of milliseconds sine the Unix
      Epoch.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function getTimestamp(): number'
      return:
        description: ''
        type: number
  - name: 'joinContainer(ContainerSchema, (container: IFluidContainer) => void)'
    uid: '@microsoft/live-share.LiveShareClient.joinContainer'
    package: '@microsoft/live-share'
    summary: Connects to the fluid container for the current teams context.
    remarks: >-
      The first client joining the container will create the container resulting
      in the

      `onContainerFirstCreated` callback being called. This callback can be used
      to set the initial

      state of of the containers object prior to the container being attached.
    isDeprecated: false
    syntax:
      content: >-
        function joinContainer(fluidContainerSchema: ContainerSchema,
        onContainerFirstCreated?: (container: IFluidContainer) => void):
        Promise<{ container: IFluidContainer, created: boolean, services:
        AzureContainerServices }>
      parameters:
        - id: fluidContainerSchema
          type: ContainerSchema
          description: Fluid objects to create.
        - id: onContainerFirstCreated
          type: '(container: IFluidContainer) =&gt; void'
          description: >-
            Optional. Callback that's called when the container is first
            created.
      return:
        description: >-
          The fluid `container` and `services` objects to use along with a
          `created` flag that if true means the container had to be created.
        type: >-
          Promise&lt;{ container: IFluidContainer, created: boolean, services:
          AzureContainerServices }&gt;
  - name: setTimestampProvider(ITimestampProvider)
    uid: '@microsoft/live-share.LiveShareClient.setTimestampProvider'
    package: '@microsoft/live-share'
    summary: Assigns a custom timestamp provider.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function setTimestampProvider(provider: ITimestampProvider)'
      parameters:
        - id: provider
          type: ITimestampProvider
          description: The timestamp provider to use.
  - name: verifyRolesAllowed(string, UserMeetingRole[])
    uid: '@microsoft/live-share.LiveShareClient.verifyRolesAllowed'
    package: '@microsoft/live-share'
    summary: Verifies that a client has one of the specified roles.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function verifyRolesAllowed(clientId: string, allowedRoles:
        UserMeetingRole[]): Promise<boolean>
      parameters:
        - id: clientId
          type: string
          description: Client ID to inspect.
        - id: allowedRoles
          type: <xref uid="@microsoft/live-share.UserMeetingRole" />[]
          description: User roles that are allowed.
      return:
        description: True if the client has one of the specified roles.
        type: Promise&lt;boolean&gt;
