### YamlMime:TSType
name: Channel_2
uid: '@microsoft/teamsfx.Channel_2'
package: '@microsoft/teamsfx'
summary: 'A <xref:@microsoft/teamsfx.NotificationTarget> that represents a team channel.'
fullName: Channel_2
remarks: 'It''s recommended to get channels from <xref:TeamsBotInstallation.channels()>.'
isDeprecated: false
type: class
constructors:
  - name: 'Channel_2(TeamsBotInstallation_2, ChannelInfo)'
    uid: '@microsoft/teamsfx.Channel_2.constructor'
    package: '@microsoft/teamsfx'
    summary: Constructor.
    remarks: >-
      It's recommended to get channels from
      <xref:TeamsBotInstallation.channels()>, instead of using this constructor.
    isDeprecated: false
    syntax:
      content: 'new Channel_2(parent: TeamsBotInstallation_2, info: ChannelInfo)'
      parameters:
        - id: parent
          type: <xref uid="@microsoft/teamsfx.TeamsBotInstallation_2" />
          description: >-
            The parent <xref:@microsoft/teamsfx.TeamsBotInstallation> where this
            channel is created from.
        - id: info
          type: ChannelInfo
          description: |
            Detailed channel information.
properties:
  - name: info
    uid: '@microsoft/teamsfx.Channel_2.info'
    package: '@microsoft/teamsfx'
    summary: Detailed channel information.
    fullName: info
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'info: ChannelInfo'
      return:
        description: ''
        type: ChannelInfo
  - name: parent
    uid: '@microsoft/teamsfx.Channel_2.parent'
    package: '@microsoft/teamsfx'
    summary: >-
      The parent <xref:@microsoft/teamsfx.TeamsBotInstallation> where this
      channel is created from.
    fullName: parent
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'parent: TeamsBotInstallation_2'
      return:
        description: ''
        type: <xref uid="@microsoft/teamsfx.TeamsBotInstallation_2" />
  - name: type
    uid: '@microsoft/teamsfx.Channel_2.type'
    package: '@microsoft/teamsfx'
    summary: Notification target type. For channel it's always "Channel".
    fullName: type
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'type: NotificationTargetType'
      return:
        description: ''
        type: <xref uid="@microsoft/teamsfx.NotificationTargetType" />
methods:
  - name: >-
      sendAdaptiveCard(unknown, (context: TurnContext, error: Error) =>
      Promise<void>)
    uid: '@microsoft/teamsfx.Channel_2.sendAdaptiveCard'
    package: '@microsoft/teamsfx'
    summary: Send an adaptive card message.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendAdaptiveCard(card: unknown, onError?: (context:
        TurnContext, error: Error) => Promise<void>): Promise<MessageResponse>
      parameters:
        - id: card
          type: unknown
          description: The adaptive card raw JSON.
        - id: onError
          type: '(context: TurnContext, error: Error) =&gt; Promise&lt;void&gt;'
          description: >
            An optional error handler that can catch exceptions during adaptive
            card sending.

            If not defined, error will be handled by `BotAdapter.onTurnError`.
      return:
        description: The response of sending adaptive card message.
        type: Promise&lt;<xref uid="@microsoft/teamsfx.MessageResponse" />&gt;
  - name: 'sendMessage(string, (context: TurnContext, error: Error) => Promise<void>)'
    uid: '@microsoft/teamsfx.Channel_2.sendMessage'
    package: '@microsoft/teamsfx'
    summary: Send a plain text message.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendMessage(text: string, onError?: (context: TurnContext,
        error: Error) => Promise<void>): Promise<MessageResponse>
      parameters:
        - id: text
          type: string
          description: The plain text message.
        - id: onError
          type: '(context: TurnContext, error: Error) =&gt; Promise&lt;void&gt;'
          description: >
            An optional error handler that can catch exceptions during message
            sending.

            If not defined, error will be handled by `BotAdapter.onTurnError`.
      return:
        description: The response of sending message.
        type: Promise&lt;<xref uid="@microsoft/teamsfx.MessageResponse" />&gt;
