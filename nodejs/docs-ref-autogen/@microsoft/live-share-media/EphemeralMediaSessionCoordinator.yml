### YamlMime:TSType
name: EphemeralMediaSessionCoordinator
uid: '@microsoft/live-share-media.EphemeralMediaSessionCoordinator'
package: '@microsoft/live-share-media'
summary: >-
  The `EphemeralMediaSessionCoordinator` tracks the playback & position state of
  all other

  clients being synchronized with. It is responsible for keeping the local media
  player

  in sync with the group.
fullName: EphemeralMediaSessionCoordinator
remarks: ''
isDeprecated: false
type: class
properties:
  - name: canPlayPause
    uid: '@microsoft/live-share-media.EphemeralMediaSessionCoordinator.canPlayPause'
    package: '@microsoft/live-share-media'
    summary: >-
      Controls whether or not the local client is allowed to instruct the group
      to play or pause.
    fullName: canPlayPause
    remarks: >-
      This flag largely meant to influence decisions made by the coordinator and
      can be used by

      the UI to determine what controls should be shown to the user. It does not
      provide any

      security in itself.


      If your app is running in a semi-trusted environment where only some
      clients are allowed

      to play/pause media, you should use "role based verification" to enforce
      those policies.
    isDeprecated: false
    syntax:
      content: 'canPlayPause: boolean'
      return:
        description: ''
        type: boolean
  - name: canSeek
    uid: '@microsoft/live-share-media.EphemeralMediaSessionCoordinator.canSeek'
    package: '@microsoft/live-share-media'
    summary: >-
      Controls whether or not the local client is allowed to seek the group to a
      new playback

      position.
    fullName: canSeek
    remarks: >-
      This flag largely meant to influence decisions made by the coordinator and
      can be used by

      the UI to determine what controls should be shown to the user. It does not
      provide any

      security in itself.


      If your app is running in a semi-trusted environment where only some
      clients are allowed

      to change the playback position, you should use "role based verification"
      to enforce those policies.
    isDeprecated: false
    syntax:
      content: 'canSeek: boolean'
      return:
        description: ''
        type: boolean
  - name: canSetTrack
    uid: '@microsoft/live-share-media.EphemeralMediaSessionCoordinator.canSetTrack'
    package: '@microsoft/live-share-media'
    summary: Controls whether or not the local client is allowed to change tracks.
    fullName: canSetTrack
    remarks: >-
      This flag largely meant to influence decisions made by the coordinator and
      can be used by

      the UI to determine what controls should be shown to the user. It does not
      provide any

      security in itself.


      If your app is running in a semi-trusted environment where only some
      clients are allowed

      to change tracks, you should use "role based verification" to enforce
      those policies.
    isDeprecated: false
    syntax:
      content: 'canSetTrack: boolean'
      return:
        description: ''
        type: boolean
  - name: canSetTrackData
    uid: >-
      @microsoft/live-share-media.EphemeralMediaSessionCoordinator.canSetTrackData
    package: '@microsoft/live-share-media'
    summary: >-
      Controls whether or not the local client is allowed to change the tracks
      custom data object.
    fullName: canSetTrackData
    remarks: >-
      This flag largely meant to influence decisions made by the coordinator and
      can be used by

      the UI to determine what controls should be shown to the user. It does not
      provide any

      security in itself.


      If your app is running in a semi-trusted environment where only some
      clients are allowed

      to change the tracks data object, you should use "role based verification"
      to enforce those

      policies.
    isDeprecated: false
    syntax:
      content: 'canSetTrackData: boolean'
      return:
        description: ''
        type: boolean
  - name: isSuspended
    uid: '@microsoft/live-share-media.EphemeralMediaSessionCoordinator.isSuspended'
    package: '@microsoft/live-share-media'
    summary: Returns true if the local client is in a suspended state.
    fullName: isSuspended
    remarks: ''
    isDeprecated: false
    syntax:
      content: boolean isSuspended
      return:
        description: ''
        type: boolean
  - name: maxPlaybackDrift
    uid: >-
      @microsoft/live-share-media.EphemeralMediaSessionCoordinator.maxPlaybackDrift
    package: '@microsoft/live-share-media'
    summary: Max amount of playback drift allowed in seconds.
    fullName: maxPlaybackDrift
    remarks: >-
      Should the local clients playback position lag by more than the specified
      value, the

      coordinator will trigger a `catchup` action.


      Defaults to a value of `1` second.
    isDeprecated: false
    syntax:
      content: number maxPlaybackDrift
      return:
        description: ''
        type: number
  - name: positionUpdateInterval
    uid: >-
      @microsoft/live-share-media.EphemeralMediaSessionCoordinator.positionUpdateInterval
    package: '@microsoft/live-share-media'
    summary: >-
      Frequency with which position updates are broadcast to the rest of the
      group in

      seconds.
    fullName: positionUpdateInterval
    remarks: Defaults to a value of `2` seconds.
    isDeprecated: false
    syntax:
      content: number positionUpdateInterval
      return:
        description: ''
        type: number
methods:
  - name: beginSuspension(CoordinationWaitPoint)
    uid: >-
      @microsoft/live-share-media.EphemeralMediaSessionCoordinator.beginSuspension
    package: '@microsoft/live-share-media'
    summary: Begins a new local suspension.
    remarks: >-
      Suspension temporarily suspend the clients local synchronization with the
      group. This can

      be useful for displaying ads to users or temporarily disconnecting from
      the session while

      the user seeks the video using a timeline scrubber.


      Multiple simultaneous suspensions are allowed and when the last suspension
      ends the local

      client will be immediately re-synchronized with the group.


      A "Dynamic Wait Point" can be specified when `beginSuspension()` is called
      and the wait

      point will be broadcast to all other clients in the group.  Those clients
      will then

      automatically enter a suspension state once they reach the positions
      specified by the

      wait point. Clients that are passed the wait point will immediately
      suspend.


      Any wait point based suspension (dynamic or static) will result in all
      clients remaining

      in a suspension state until the list client ends their suspension. This
      behavior can be

      conditionally bypassed by settings the wait points `maxClients` value.


      Throws an exception if the session/coordinator hasn't been initialized.
    isDeprecated: false
    syntax:
      content: >-
        function beginSuspension(waitPoint?: CoordinationWaitPoint):
        MediaSessionCoordinatorSuspension
      parameters:
        - id: waitPoint
          type: <xref uid="@microsoft/live-share-media.CoordinationWaitPoint" />
          description: Optional. Dynamic wait point to broadcast to all of the clients.
      return:
        description: >-
          The suspension object. Call `end()` on the returned suspension to end
          the suspension.
        type: >-
          <xref
          uid="@microsoft/live-share-media.MediaSessionCoordinatorSuspension" />
  - name: pause()
    uid: '@microsoft/live-share-media.EphemeralMediaSessionCoordinator.pause'
    package: '@microsoft/live-share-media'
    summary: Instructs the group to pause the current track.
    remarks: >-
      Throws an exception if the session/coordinator hasn't been initialized, no
      track has been

      loaded, or `canPlayPause` is false.
    isDeprecated: false
    syntax:
      content: function pause()
  - name: play()
    uid: '@microsoft/live-share-media.EphemeralMediaSessionCoordinator.play'
    package: '@microsoft/live-share-media'
    summary: Instructs the group to play the current track.
    remarks: >-
      Throws an exception if the session/coordinator hasn't been initialized, no
      track has been

      loaded, or `canPlayPause` is false.
    isDeprecated: false
    syntax:
      content: function play()
  - name: seekTo(number)
    uid: '@microsoft/live-share-media.EphemeralMediaSessionCoordinator.seekTo'
    package: '@microsoft/live-share-media'
    summary: Instructs the group to seek to a new position within the current track.
    remarks: >-
      Throws an exception if the session/coordinator hasn't been initialized, no
      track has been

      loaded, or `canSeek` is false.
    isDeprecated: false
    syntax:
      content: 'function seekTo(time: number)'
      parameters:
        - id: time
          type: number
          description: |
            Playback position in seconds to seek to.
  - name: 'setTrack(ExtendedMediaMetadata | null, CoordinationWaitPoint[])'
    uid: '@microsoft/live-share-media.EphemeralMediaSessionCoordinator.setTrack'
    package: '@microsoft/live-share-media'
    summary: Instructs the group to load a new track.
    remarks: >-
      Throws an exception if the session/coordinator hasn't been initialized or
      `canSetTrack` is

      false.
    isDeprecated: false
    syntax:
      content: >-
        function setTrack(metadata: ExtendedMediaMetadata | null, waitPoints?:
        CoordinationWaitPoint[])
      parameters:
        - id: metadata
          type: >-
            <xref uid="@microsoft/live-share-media.ExtendedMediaMetadata" /> |
            null
          description: >-
            The track to load or `null` to indicate that the end of the track is
            reached.
        - id: waitPoints
          type: '<xref uid="@microsoft/live-share-media.CoordinationWaitPoint" />[]'
          description: >
            Optional. List of static wait points to configure for the track. 
            Dynamic wait points can be added via the `beginSuspension()` call.
  - name: setTrackData(object | null)
    uid: '@microsoft/live-share-media.EphemeralMediaSessionCoordinator.setTrackData'
    package: '@microsoft/live-share-media'
    summary: Updates the track data object for the current track.
    remarks: >-
      The track data object can be used by applications to synchronize things
      like pitch, roll,

      and yaw of a 360 video. This data object will be reset to null anytime the
      track changes.


      Throws an exception if the session/coordinator hasn't been initialized or
      `canSetTrackData` is

      false.
    isDeprecated: false
    syntax:
      content: 'function setTrackData(data: object | null)'
      parameters:
        - id: data
          type: object | null
          description: >
            New data object to sync with the group. This value will be
            synchronized using a last writer wins strategy.
extends: any
